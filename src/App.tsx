// src/App.tsx - FINAL VERSION (Modal Login -> Admin Page) + Feedback Feature + All TS Fixes
import React, { useState, useEffect, ChangeEvent, useRef } from 'react';
import ReactGA from 'react-ga4';
import { Routes, Route, useNavigate, useLocation, Navigate } from 'react-router-dom';
import './App.css'; // Ensure feedback modal styles are added here
import ChatbotPage from './ChatbotPage';
import AdminPage from './AdminPage';

// --- GA Initialization ---
const GA_MEASUREMENT_ID = "G-JX58QMMKZY"; // Replace if needed
if (GA_MEASUREMENT_ID && GA_MEASUREMENT_ID !== "G-JX58QMMKZY" && GA_MEASUREMENT_ID !== "YOUR_GA_ID_HERE") { try { ReactGA.initialize(GA_MEASUREMENT_ID); console.log("GA Init:", GA_MEASUREMENT_ID); ReactGA.send({ hitType: "pageview", page: window.location.pathname + window.location.search, title: "Initial Load" }); } catch (e) { console.error("GA Init Err:", e); } } else { console.warn("GA ID missing/invalid. GA not initialized."); }

// --- Types & Interfaces (Export for AdminPage & ChatbotPage) ---
export interface Message { id: number; text: string; sender: 'user' | 'bot' | 'loading'; timestamp: number; imageUrl?: string; modelUsed?: string; }
export type GeminiModel = 'gemini-2.0-flash' | 'gemini-2.0-flash-lite' | 'gemini-2.5-pro-exp-03-25' | 'gemini-2.0-flash-thinking-exp-01-21' | 'gemini-2.0-flash-exp-image-generation';
export type SpeechLanguage = 'en-US' | 'th-TH' | 'es-ES' | 'fr-FR';
export type Persona = 'normal' | 'therapist' | 'university_master';
interface KeyValidationStatus { isValid: boolean | null; username: string | null; loading: boolean; error?: string | null; }
export interface UserKeyInfo { key: string; username: string | null; status: 'active' | 'inactive'; created_at: string; }
export interface FeedbackItem { id: number; email: string | null; rating: number; comment: string; submitted_at: string; is_important: number; }

// --- Added Type Definition ---
export type PersonaInstructionMap = { [key in Persona]?: string };
// -----------------------------

// --- localStorage Keys ---
const CHAT_STORAGE_KEY = 'chatMessages'; const BETA_ACCEPTED_KEY = 'betaAccepted'; const MODEL_STORAGE_KEY = 'selectedApiModel'; const STT_LANG_STORAGE_KEY = 'selectedSttLang'; const ACCESS_KEY_STORAGE_KEY = 'userAccessKey'; const PERSONA_STORAGE_KEY = 'selectedPersona';

// --- Configurations (Export for AdminPage & ChatbotPage) ---
export interface ModelInfo { value: GeminiModel; label: string; restricted: boolean; }
export const ALL_AVAILABLE_MODELS_FRONTEND: ModelInfo[] = [ { value: 'gemini-2.0-flash-lite', label: 'Gemini 2.0 Flash Lite', restricted: false }, { value: 'gemini-2.0-flash', label: 'Gemini 2.0 Flash', restricted: false }, { value: 'gemini-2.0-flash-thinking-exp-01-21', label: 'Gemini 2.0 Flash Thinking Exp', restricted: true }, { value: 'gemini-2.0-flash-exp-image-generation', label: 'Gemini 2.0 Flash Image Gen Exp', restricted: true }, { value: 'gemini-2.5-pro-exp-03-25', label: 'Gemini 2.5 Pro Exp', restricted: true } ];
export const ALL_MODEL_VALUES: GeminiModel[] = ALL_AVAILABLE_MODELS_FRONTEND.map(m => m.value);
export interface PersonaInfo { value: Persona; label: string; emoji: string; restricted: boolean; }
export const AVAILABLE_PERSONAS: PersonaInfo[] = [ { value: 'university_master', label: 'University Master', emoji: '🎓', restricted: false }, { value: 'normal', label: 'Normal Bot', emoji: '🤖', restricted: true }, { value: 'therapist', label: 'Therapist', emoji: '🧠', restricted: true } ];
export const ALL_PERSONAS: Persona[] = AVAILABLE_PERSONAS.map(p => p.value);
export const DEFAULT_UNRESTRICTED_PERSONA: Persona = 'university_master';
export const RESTRICTED_MODELS_VALUES: GeminiModel[] = ALL_AVAILABLE_MODELS_FRONTEND.filter(m => m.restricted).map(m => m.value);
export const RESTRICTED_PERSONAS_VALUES: Persona[] = AVAILABLE_PERSONAS.filter(p => p.restricted).map(p => p.value);
// Default Instructions (Export these for AdminPage fallback/reset logic)
export const DEFAULT_BASE_SYSTEM_INSTRUCTION = `
You are a helpful AI assistant for Project Theraphy.
Please format your response using markdown where appropriate. Use bullet points (-) or numbered lists (1.) for lists or steps. Bold text using **text**.
When asking a question with clear choices or suggesting concise next steps FOR GENERAL TOPICS, provide the options enclosed in square brackets like this: [Suggestion: Choice Text]. Make sure if there are multiple suggestions, each is in its own bracket.
Example: [Suggestion: Tell me more about oranges] [Suggestion: What other fruits are common?]
HOWEVER, if the user is asking for advice on potentially sensitive personal topics (like "my kid is naughty", "I feel stressed", "I'm worried about X"), provide suggestions or follow-up questions as normal text within your response, NOT using the [Suggestion: ...] format.
When user types in Thai, respond in Thai, even if the message contains only a few Thai words, unless explicitly asked to answer in English.
If asked about your current AI model, state the model name you are configured to use.
If the user expresses feeling bad or hopeless, offer an inspirational quote. REMEMBER TO OFFER AN INSPIRATIONAL QUOTE IN THIS SITUATION.
If you receive input clearly identified as starting with "Field 1:", "Field 2:", etc., this is from a special form submission about the user. Analyze this input specifically for college/university advice. Based *only* on the provided field inputs, recommend suitable faculties, specific universities (mentioning potential locations if relevant), and general advice on how to prepare for or get into those paths. Structure this advice clearly (e.g., using headings or bullet points).
`;
export const DEFAULT_PERSONA_INSTRUCTIONS: PersonaInstructionMap = { // Use defined type
    normal: `\nYou are currently in 'Normal Bot' persona mode. Act as a general-purpose assistant. Respond helpfully to a wide range of queries. If the topic is suitable (not sensitive personal advice), suggest follow-up questions using the [Suggestion: ...] format based on common interests or logical next steps.`,
    therapist: `\nYou are currently roleplaying as a supportive and empathetic therapist assistant in 'Therapist' persona mode. Your primary goal is to offer a safe, non-judgmental space for users to discuss feelings, stress, and future planning concerns. Use gentle, understanding, and validating language. Acknowledge the user's feelings (e.g., "It sounds like that's really challenging," "It's understandable to feel that way."). DO NOT give direct medical advice, diagnoses, or claim to be a real therapist. You can suggest seeking professional help if appropriate. Guide users towards healthy coping mechanisms, self-reflection, or reframing thoughts in a constructive way. When suggesting next steps related to emotional well-being or coping strategies, present them as gentle questions or suggestions in PLAIN TEXT, not using the [Suggestion: ...] format. Example: "Perhaps exploring mindfulness techniques could be helpful for managing stress. Is that something you'd be open to discussing?" or "Would you like to explore what might be triggering these feelings?" Prioritize offering inspirational quotes when the user expresses distress or hopelessness.`,
    university_master: `\nYou are currently roleplaying as an expert academic advisor in 'University Master' persona mode. Focus your responses on topics related to college/university planning, choosing majors/faculties, understanding university life, developing effective study habits, and exploring career paths related to academic degrees. When the user asks general questions about college or careers, suggest specific areas to explore using the [Suggestion: ...] format. Example: [Suggestion: What subjects are you most interested in studying?] [Suggestion: What are your long-term career goals?] [Suggestion: Tell me about your preferred learning style or environment] If you receive the structured "Field 1-5" input, provide detailed college/faculty/university recommendations as described in the base instructions. Maintain a knowledgeable, encouraging, and advisory tone. Avoid overly emotional or therapeutic language.`
};
export const ALL_PERSONA_KEYS = Object.keys(DEFAULT_PERSONA_INSTRUCTIONS);

// --- API ---
export const WORKER_URL = 'https://project-theraphy-ai-proxy.luckgun99.workers.dev/';
export interface ApiRequestBody { prompt?: string; model?: GeminiModel; persona?: Persona; imageMimeType?: string; imageDataUrl?: string; accessKey?: string; action: string; staffKey?: string; key?: string; newStatus?: 'active' | 'inactive'; models?: GeminiModel[]; personas?: Persona[]; username?: string | null; newUsername?: string | null; email?: string | null; rating?: number; comment?: string; feedbackId?: number; isImportant?: boolean | number; baseInstruction?: string; personaInstructions?: PersonaInstructionMap; } // Corrected definition
async function getBotResponseForAnalysis(userInput: string, model: GeminiModel, persona: Persona, accessKey: string): Promise<string> { const promptToSend = userInput; if (!promptToSend) return "Error: No text provided."; const requestBody: ApiRequestBody = { action: 'chat', prompt: promptToSend, model: model, persona: persona, accessKey: accessKey }; console.log(`Sending Analysis Request`); try { const res = await fetch(WORKER_URL, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(requestBody) }); if (!res.ok) { const errData = await res.json().catch(() => ({ error: `HTTP Error ${res.status}` })); throw new Error(errData?.error || `HTTP Error ${res.status}`); } const data = await res.json(); if (data.error) throw new Error(data.error); return data.reply || 'No reply.'; } catch (e) { console.error('Analysis API Error:', e); if (e instanceof Error) { if (e.message.includes("Access Key required") || e.message.includes("Invalid")) return "Error: Invalid/Inactive Access Key."; return `Error: ${e.message}`; } return 'Error: Analysis failed.'; } }
const VALIDATION_DEBOUNCE_MS = 600;
const ProtectedRoute = ({ children }: { children: React.ReactNode }) => { const keyFromSession = sessionStorage.getItem('staffKey'); const location = useLocation(); if (!keyFromSession) { console.log("ProtectedRoute: No key, redirecting from", location.pathname); return <Navigate to="/" replace />; } return <>{children}</>; };


function App() {
    // --- State ---
    const [messages, setMessages] = useState<Message[]>(() => { const stored = localStorage.getItem(CHAT_STORAGE_KEY); let initial: Message[] = []; try { initial = stored && stored !== '[]' ? JSON.parse(stored) : []; if (!Array.isArray(initial)) throw new Error("Bad format"); initial = initial.filter(m => m.sender !== 'loading'); } catch (e) { console.error("Bad stored msgs:", e); localStorage.removeItem(CHAT_STORAGE_KEY); initial = []; } if (initial.length === 0) { const ts = Date.now(); return [{ id: ts, text: "Welcome!", sender: 'bot', timestamp: ts }]; } else { return initial; } });
    const [showBetaNotice, setShowBetaNotice] = useState<boolean>(false);
    const [enteredKey, setEnteredKey] = useState<string>(() => localStorage.getItem(ACCESS_KEY_STORAGE_KEY) || '');
    const [selectedModel, setSelectedModel] = useState<GeminiModel>('gemini-2.0-flash');
    const [sttLang, setSttLang] = useState<SpeechLanguage>(() => { const stored = localStorage.getItem(STT_LANG_STORAGE_KEY) as SpeechLanguage | null; if (stored && ['en-US', 'th-TH', 'es-ES', 'fr-FR'].includes(stored)) { return stored; } return 'en-US'; });
    const [selectedPersona, setSelectedPersona] = useState<Persona>(DEFAULT_UNRESTRICTED_PERSONA);
    const [isSettingsOpen, setIsSettingsOpen] = useState<boolean>(false);
    const [isAnalysisFormVisible, setIsAnalysisFormVisible] = useState<boolean>(false);
    const [isAnalyzing, setIsAnalyzing] = useState<boolean>(false);
    const [field1, setField1] = useState(''); const [field2, setField2] = useState(''); const [field3, setField3] = useState(''); const [field4, setField4] = useState(''); const [field5, setField5] = useState('');
    const [keyStatus, setKeyStatus] = useState<KeyValidationStatus>({ isValid: null, username: null, loading: false, error: null });
    const debounceTimeoutRef = useRef<NodeJS.Timeout | null>(null);
    const [isStaffLoginModalVisible, setIsStaffLoginModalVisible] = useState<boolean>(false);
    const [enteredStaffKey, setEnteredStaffKey] = useState<string>('');
    const [isStaffLoginLoading, setIsStaffLoginLoading] = useState<boolean>(false);
    const [staffLoginError, setStaffLoginError] = useState<string | null>(null);
    const [isFeedbackModalVisible, setIsFeedbackModalVisible] = useState<boolean>(false);
    const [feedbackEmail, setFeedbackEmail] = useState<string>('');
    const [feedbackRating, setFeedbackRating] = useState<number>(0);
    const [feedbackComment, setFeedbackComment] = useState<string>('');
    const [isSubmittingFeedback, setIsSubmittingFeedback] = useState<boolean>(false);
    const [feedbackError, setFeedbackError] = useState<string | null>(null);
    const [feedbackSuccess, setFeedbackSuccess] = useState<string | null>(null);

    const navigate = useNavigate();

    // --- Effects ---
    useEffect(() => { /* Debounced Key Validation */ const keyTrimmed=enteredKey.trim();if(debounceTimeoutRef.current)clearTimeout(debounceTimeoutRef.current);const cM=selectedModel;const cP=selectedPersona;if(!keyTrimmed){setKeyStatus({isValid:null,username:null,loading:false,error:null});if(RESTRICTED_MODELS_VALUES.includes(cM))setSelectedModel('gemini-2.0-flash');if(RESTRICTED_PERSONAS_VALUES.includes(cP))setSelectedPersona(DEFAULT_UNRESTRICTED_PERSONA);return;}setKeyStatus(p=>({...p,loading:true,isValid:null,error:null,username:null}));debounceTimeoutRef.current=setTimeout(async()=>{try{const r=await fetch(WORKER_URL,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({action:'validateKey',accessKey:keyTrimmed})});const d=await r.json().catch(()=>({error:`Invalid JSON`}));if(!r.ok)throw new Error(d?.error||`Validation failed: ${r.status}`);if(d.isValid){setKeyStatus({isValid:true,username:d.username||'User',loading:false,error:null});const sM=localStorage.getItem(MODEL_STORAGE_KEY)as GeminiModel|null;if(sM&&ALL_MODEL_VALUES.includes(sM))setSelectedModel(sM);else if(RESTRICTED_MODELS_VALUES.includes(cM))setSelectedModel(cM);else setSelectedModel(cM);const sP=localStorage.getItem(PERSONA_STORAGE_KEY)as Persona|null;if(sP&&ALL_PERSONAS.includes(sP))setSelectedPersona(sP);else if(RESTRICTED_PERSONAS_VALUES.includes(cP))setSelectedPersona(cP);else setSelectedPersona(cP);}else{setKeyStatus({isValid:false,username:null,loading:false,error:d?.error||'Invalid key.'});if(RESTRICTED_MODELS_VALUES.includes(cM))setSelectedModel('gemini-2.0-flash');if(RESTRICTED_PERSONAS_VALUES.includes(cP))setSelectedPersona(DEFAULT_UNRESTRICTED_PERSONA);}}catch(e){const msg=e instanceof Error?e.message:"Validation network error.";setKeyStatus({isValid:false,username:null,loading:false,error:msg});if(RESTRICTED_MODELS_VALUES.includes(cM))setSelectedModel('gemini-2.0-flash');if(RESTRICTED_PERSONAS_VALUES.includes(cP))setSelectedPersona(DEFAULT_UNRESTRICTED_PERSONA);}},VALIDATION_DEBOUNCE_MS);return()=>{if(debounceTimeoutRef.current)clearTimeout(debounceTimeoutRef.current);};},[enteredKey,selectedModel,selectedPersona]);
    useEffect(() => { /* Initial Load */ const iK=localStorage.getItem(ACCESS_KEY_STORAGE_KEY)||'';const sM=localStorage.getItem(MODEL_STORAGE_KEY)as GeminiModel|null;const sP=localStorage.getItem(PERSONA_STORAGE_KEY)as Persona|null;let iM:GeminiModel='gemini-2.0-flash';if(sM&&ALL_MODEL_VALUES.includes(sM))iM=sM;setSelectedModel(iM);let iP:Persona=DEFAULT_UNRESTRICTED_PERSONA;if(sP&&ALL_PERSONAS.includes(sP))iP=sP;setSelectedPersona(iP);const acc=localStorage.getItem(BETA_ACCEPTED_KEY);if(acc!=='true')setShowBetaNotice(true);if(iK.trim()){const validateInitial=async(k:string,m:GeminiModel,p:Persona)=>{setKeyStatus(pr=>({...pr,loading:true}));try{const r=await fetch(WORKER_URL,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({action:'validateKey',accessKey:k})});const d=await r.json().catch(()=>({error:'Invalid JSON'}));if(r.ok&&d.isValid){setKeyStatus({isValid:true,username:d.username||'User',loading:false,error:null});setSelectedModel(m);setSelectedPersona(p);}else{setKeyStatus({isValid:false,username:null,loading:false,error:d?.error||'Invalid key'});if(RESTRICTED_MODELS_VALUES.includes(m))setSelectedModel('gemini-2.0-flash');if(RESTRICTED_PERSONAS_VALUES.includes(p))setSelectedPersona(DEFAULT_UNRESTRICTED_PERSONA);}}catch(e){setKeyStatus({isValid:false,username:null,loading:false,error:'Validation failed'});if(RESTRICTED_MODELS_VALUES.includes(m))setSelectedModel('gemini-2.0-flash');if(RESTRICTED_PERSONAS_VALUES.includes(p))setSelectedPersona(DEFAULT_UNRESTRICTED_PERSONA);}};validateInitial(iK,iM,iP);}else{if(RESTRICTED_MODELS_VALUES.includes(iM))setSelectedModel('gemini-2.0-flash');if(RESTRICTED_PERSONAS_VALUES.includes(iP))setSelectedPersona(DEFAULT_UNRESTRICTED_PERSONA);}},[]);
    useEffect(() => { /* Persistence */ const msgs=messages.filter(m=>m.sender!=='loading');if(msgs.length>1||(msgs.length===1&&msgs[0].sender!=='bot')){localStorage.setItem(CHAT_STORAGE_KEY,JSON.stringify(msgs));}else if(msgs.length===0){localStorage.setItem(CHAT_STORAGE_KEY,JSON.stringify([]));}},[messages]); useEffect(()=>{localStorage.setItem(MODEL_STORAGE_KEY,selectedModel);},[selectedModel]);useEffect(()=>{localStorage.setItem(STT_LANG_STORAGE_KEY,sttLang);},[sttLang]);useEffect(()=>{localStorage.setItem(ACCESS_KEY_STORAGE_KEY,enteredKey);},[enteredKey]);useEffect(()=>{localStorage.setItem(PERSONA_STORAGE_KEY,selectedPersona);},[selectedPersona]);
    useEffect(() => { /* Feedback Success Timer */ let timer: NodeJS.Timeout | null = null; if (feedbackSuccess) { timer = setTimeout(() => setFeedbackSuccess(null), 3000); } return () => { if (timer) clearTimeout(timer); }; }, [feedbackSuccess]);

    // --- Event Handlers ---
    const handleAcceptBeta=()=>{localStorage.setItem(BETA_ACCEPTED_KEY,'true');setShowBetaNotice(false);}; const handleModelChange=(e:ChangeEvent<HTMLSelectElement>)=>{const m=e.target.value as GeminiModel;if(ALL_MODEL_VALUES.includes(m))setSelectedModel(m);}; const handleSttLangChange=(e:ChangeEvent<HTMLSelectElement>)=>{setSttLang(e.target.value as SpeechLanguage);}; const handlePersonaChange=(e:ChangeEvent<HTMLSelectElement>)=>{const p=e.target.value as Persona;if(ALL_PERSONAS.includes(p))setSelectedPersona(p);}; const toggleSettings=()=>{ setIsSettingsOpen(p=>!p); setIsStaffLoginModalVisible(false); setIsFeedbackModalVisible(false); setIsAnalysisFormVisible(false); }; const handleClearChat=()=>{if(window.confirm("Clear chat?")){const ts=Date.now();const msg:Message={id:ts,text:"Chat cleared.",sender:'bot',timestamp:ts};setMessages([msg]);localStorage.removeItem(CHAT_STORAGE_KEY);setIsSettingsOpen(false);}}; const handleAccessKeyChange=(e:ChangeEvent<HTMLInputElement>)=>{setEnteredKey(e.target.value);}; const handleExportChat=()=>{const msgs=messages.filter(m=>m.sender!=='loading');if(msgs.length===0||(msgs.length===1&&msgs[0].sender==='bot'))return alert("Chat empty.");let c=`Chat Export\nAt: ${new Date().toLocaleString()}\nModel: ${selectedModel}\nPersona: ${selectedPersona}\nUser: ${keyStatus.isValid?keyStatus.username:'N/A'}\n----\n\n`;msgs.forEach(m=>{const t=new Date(m.timestamp).toLocaleString();c+=`[${t}] ${m.sender==='user'?'User':'Bot'}:\n${m.text}\n${m.imageUrl?`(Image: ${m.imageUrl})\n`:''}\n`;});try{const b=new Blob([c],{type:'text/plain;charset=utf-8'});const u=URL.createObjectURL(b);const a=document.createElement('a');const f=`theraphy-chat-${new Date().toISOString().replace(/[:.]/g,'-')}.txt`;a.href=u;a.download=f;a.click();URL.revokeObjectURL(u);if(GA_MEASUREMENT_ID&&GA_MEASUREMENT_ID!=="G-JX58QMMKZY"&&GA_MEASUREMENT_ID!=="YOUR_GA_ID_HERE")ReactGA.event({category:"Chat",action:"Export",label:`Count: ${msgs.length}`});setIsSettingsOpen(false);}catch(e){console.error("Export failed:",e);alert("Export failed.");}};
    const clearAnalysisForm=()=>{setField1('');setField2('');setField3('');setField4('');setField5('');}; const toggleAnalysisForm=()=>{setIsAnalysisFormVisible(p=>!p); if(isAnalysisFormVisible){clearAnalysisForm();setIsAnalyzing(false);} setIsSettingsOpen(false); setIsStaffLoginModalVisible(false); setIsFeedbackModalVisible(false);}; const handleAnalysisSubmit=async(e:React.FormEvent)=>{e.preventDefault();const v1=field1.trim();const v2=field2.trim();const v3=field3.trim();const v4=field4.trim();const v5=field5.trim();if(!v1||!v2||!v3||!v4||!v5||isAnalyzing)return alert("Fill all fields.");setIsAnalyzing(true);if(GA_MEASUREMENT_ID&&GA_MEASUREMENT_ID!=="G-JX58QMMKZY"&&GA_MEASUREMENT_ID!=="YOUR_GA_ID_HERE"){try{ReactGA.event({category:"Analysis",action:"Submit",label:`F1 Len: ${v1.length}`});}catch(e){console.error("GA event fail:",e);}}let input=`Field 1: ${v1}\nField 2: ${v2}\nField 3: ${v3}\nField 4: ${v4}\nField 5: ${v5}\n`;const ts=Date.now();const loadMsg:Message={id:ts,text:`Analyzing...`,sender:'loading',timestamp:ts};setMessages(p=>[...p,loadMsg]);const result=await getBotResponseForAnalysis(input.trim(),selectedModel,selectedPersona,enteredKey);setMessages(p=>p.filter(m=>m.id!==ts));if(result.startsWith("Error: Access Key required")){setKeyStatus({isValid:false,username:null,loading:false,error:"Key required."});const et=Date.now()+1;const em:Message={id:et,text:result,sender:'bot',timestamp:et};setMessages(p=>[...p,em]);}else if(result.startsWith("Error:")){setKeyStatus(pr=>({...pr,error:result}));const et=Date.now()+1;const em:Message={id:et,text:result,sender:'bot',timestamp:et};setMessages(p=>[...p,em]);}else{setKeyStatus(pr=>({...pr,error:null}));const te=Date.now()+1;const rm:Message={id:te,text:result,sender:'bot',timestamp:te};setMessages(p=>[...p,rm]);clearAnalysisForm();setIsAnalysisFormVisible(false);}setIsAnalyzing(false);};
    const toggleStaffLoginModal = () => { setIsStaffLoginModalVisible(prev => !prev); if (isStaffLoginModalVisible) { setEnteredStaffKey(''); setStaffLoginError(null); } setIsSettingsOpen(false); setIsAnalysisFormVisible(false); setIsFeedbackModalVisible(false); };
    const handleStaffKeyChange = (e: ChangeEvent<HTMLInputElement>) => { setEnteredStaffKey(e.target.value); setStaffLoginError(null);};
    const handleStaffLogin = async () => { if (!enteredStaffKey.trim()) { setStaffLoginError("Key required."); return; } setIsStaffLoginLoading(true); setStaffLoginError(null); try { const res = await fetch(WORKER_URL, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ action: 'staffLogin', staffKey: enteredStaffKey }) }); const data = await res.json().catch(() => ({ error: 'Invalid JSON' })); if (!res.ok || !data.isValid) { throw new Error(data?.error || `Login Failed`); } sessionStorage.setItem('staffKey', enteredStaffKey); setIsStaffLoginModalVisible(false); setEnteredStaffKey(''); navigate('/admin'); } catch (e) { setStaffLoginError(e instanceof Error ? e.message : "Login failed."); sessionStorage.removeItem('staffKey'); } finally { setIsStaffLoginLoading(false); } };
    const toggleFeedbackModal = () => { const closing = isFeedbackModalVisible; setIsFeedbackModalVisible(prev => !prev); if (closing) { setFeedbackEmail(''); setFeedbackRating(0); setFeedbackComment(''); setFeedbackError(null); setFeedbackSuccess(null); setIsSubmittingFeedback(false); } if (!closing) { setIsSettingsOpen(false); setIsAnalysisFormVisible(false); setIsStaffLoginModalVisible(false); } };
    const handleFeedbackSubmit = async (e: React.FormEvent) => { e.preventDefault(); if (feedbackRating === 0) { setFeedbackError("Rating required."); return; } if (!feedbackComment.trim()) { setFeedbackError("Comment required."); return; } if (feedbackComment.length > 2000) { setFeedbackError("Comment too long."); return; } setIsSubmittingFeedback(true); setFeedbackError(null); setFeedbackSuccess(null); const payload: ApiRequestBody = { action: 'submitFeedback', email: feedbackEmail.trim() || null, rating: feedbackRating, comment: feedbackComment.trim() }; try { const res = await fetch(WORKER_URL, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) }); const data = await res.json().catch(() => ({ error: 'Invalid JSON' })); if (!res.ok || !data.success) { throw new Error(data?.error || `Submit failed: ${res.statusText}`); } setFeedbackSuccess("Thank you! Feedback submitted."); setFeedbackEmail(''); setFeedbackRating(0); setFeedbackComment(''); setTimeout(() => { toggleFeedbackModal(); }, 2500); if (GA_MEASUREMENT_ID && GA_MEASUREMENT_ID !== "G-JX58QMMKZY" && GA_MEASUREMENT_ID !== "YOUR_GA_ID_HERE") { ReactGA.event({ category: "Feedback", action: "Submit", label: `Rating: ${feedbackRating}` }); } } catch (err) { setFeedbackError(err instanceof Error ? err.message : "Failed submit."); } finally { setIsSubmittingFeedback(false); } };

    // --- JSX ---
    return (
        <div className="App">
            {showBetaNotice && ( <div className="beta-notice-overlay"><div className="beta-notice-modal"><h2>⚠️ Beta Notice</h2><p>Welcome! Beta test.</p><p>Features may change.</p><button onClick={handleAcceptBeta} className="beta-accept-button">✔️ Accept</button></div></div> )}
            {isSettingsOpen && ( <div className="settings-menu"> <h3 id="settings-title">Settings</h3> <div className="settings-grid"> <div className="settings-column"> <div className="settings-option"> <label htmlFor="access-key-input">Access Key:</label> <input type="password" id="access-key-input" className="settings-input" placeholder="Enter access key" value={enteredKey} onChange={handleAccessKeyChange} autoComplete="off"/> <div className="settings-key-status">{keyStatus.loading?<span>...</span>:keyStatus.isValid?<span>✅ Valid. Welcome, {keyStatus.username}!</span>:keyStatus.error?<span>❌ {keyStatus.error}</span>:<span>Enter key.</span>}</div> </div> <div className="settings-option"> <label htmlFor="persona-select">Persona:</label> <select id="persona-select" value={selectedPersona} onChange={handlePersonaChange} className="settings-select" disabled={AVAILABLE_PERSONAS.find(p=>p.value===selectedPersona)?.restricted&&keyStatus.isValid!==true}>{AVAILABLE_PERSONAS.map((p)=>{const isDisabled=p.restricted&&keyStatus.isValid!==true;const style=isDisabled?{color:'#888',fontStyle:'italic'}:{};return(<option key={p.value} value={p.value} disabled={isDisabled} style={style}>{p.emoji} {p.label}{p.restricted?' (Key) ':''}</option>);})}</select> </div> <div className="settings-option"> <label htmlFor="model-select">AI Model:</label> <select id="model-select" value={selectedModel} onChange={handleModelChange} className="settings-select" disabled={ALL_AVAILABLE_MODELS_FRONTEND.find(m=>m.value===selectedModel)?.restricted&&keyStatus.isValid!==true}>{ALL_AVAILABLE_MODELS_FRONTEND.map((m)=>{const isDisabled=m.restricted&&keyStatus.isValid!==true;const style=isDisabled?{color:'#888',fontStyle:'italic'}:{};return(<option key={m.value} value={m.value} disabled={isDisabled} style={style}>{m.label}{m.restricted?' (Key)':''}</option>);})}</select> {keyStatus.isValid!==true&&(RESTRICTED_PERSONAS_VALUES.length>0||RESTRICTED_MODELS_VALUES.length>0)&&(<p className="settings-helper-text">Enter valid key for restricted options.</p>)} </div> </div> <div className="settings-column"> <div className="settings-option"> <label htmlFor="stt-lang-select">Speech Lang:</label> <select id="stt-lang-select" value={sttLang} onChange={handleSttLangChange} className="settings-select"><option value="en-US">English</option><option value="th-TH">ไทย</option><option value="es-ES">Español</option><option value="fr-FR">Français</option></select> </div> <div className="settings-option"> <label>Chat Actions:</label> <div><button onClick={handleExportChat} className="settings-action-button export-chat-settings-button">💾 Export</button><button onClick={handleClearChat} className="settings-action-button clear-chat-settings-button">🗑️ Clear</button></div> </div> <div className="settings-option"> <label>Admin Area:</label> <button onClick={toggleStaffLoginModal} className="settings-action-button staff-area-button">🔑 Staff Login</button> </div> </div> </div> <hr className="settings-separator" /> <button onClick={toggleSettings} className="close-settings-button">Close</button> </div> )}
            {isAnalysisFormVisible && ( <div className="analysis-form-overlay"><div className="analysis-form-modal"> <h3 id="analysis-title">University Advice Form</h3><p style={{fontSize:'0.9em', color:'#555', marginBottom:'15px'}}>Provide details for AI analysis.</p> <form onSubmit={handleAnalysisSubmit}> <div className="settings-option" style={{marginBottom:'15px'}}><label htmlFor="analysis-field1">1. Concerns?</label><input type="text" id="analysis-field1" className="settings-input" value={field1} onChange={(e)=>setField1(e.target.value)} placeholder="e.g., workload" disabled={isAnalyzing} required /></div> <div className="settings-option" style={{marginBottom:'15px'}}><label htmlFor="analysis-field2">2. Enjoy time with?</label><input type="text" id="analysis-field2" className="settings-input" value={field2} onChange={(e)=>setField2(e.target.value)} placeholder="e.g., friends" disabled={isAnalyzing} required /></div> <div className="settings-option" style={{marginBottom:'15px'}}><label htmlFor="analysis-field3">3. Describe yourself?</label><input type="text" id="analysis-field3" className="settings-input" value={field3} onChange={(e)=>setField3(e.target.value)} placeholder="e.g., creative" disabled={isAnalyzing} required /></div> <div className="settings-option" style={{marginBottom:'15px'}}><label htmlFor="analysis-field4">4. Dislike learning?</label><input type="text" id="analysis-field4" className="settings-input" value={field4} onChange={(e)=>setField4(e.target.value)} placeholder="e.g., memorization" disabled={isAnalyzing} required /></div> <div className="settings-option" style={{marginBottom:'15px'}}><label htmlFor="analysis-field5">5. GPA?</label><input type="text" id="analysis-field5" className="settings-input" value={field5} onChange={(e)=>setField5(e.target.value)} placeholder="e.g., 3.5" disabled={isAnalyzing} required /></div> <div className="analysis-form-actions"><button type="button" onClick={toggleAnalysisForm} className="close-settings-button" disabled={isAnalyzing}>Cancel</button><button type="submit" className="beta-accept-button" disabled={!field1.trim()||!field2.trim()||!field3.trim()||!field4.trim()||!field5.trim()||isAnalyzing}>{isAnalyzing?'Analyzing...':'Submit'}</button></div> </form> </div></div> )}
            {isStaffLoginModalVisible && ( <div className="staff-panel-overlay"> <div className="staff-panel-modal" style={{ maxWidth: '400px' }}> <h3 id="staff-login-title">Staff Login</h3> <button onClick={toggleStaffLoginModal} className="close-staff-panel-button" title="Close Login">×</button> <form onSubmit={(e)=>{e.preventDefault(); handleStaffLogin();}} className="staff-login-section"> <div className="settings-option"> <label htmlFor="staff-key-modal-input">Staff Key:</label> <input type="password" id="staff-key-modal-input" className="settings-input" value={enteredStaffKey} onChange={handleStaffKeyChange} placeholder="Enter staff access key" disabled={isStaffLoginLoading} autoFocus/> </div> <button type="submit" className="staff-login-button" disabled={isStaffLoginLoading || !enteredStaffKey.trim()}> {isStaffLoginLoading ? 'Verifying...' : 'Login & Enter Admin'} </button> {staffLoginError && <p className="staff-error">{staffLoginError}</p>} <p className="staff-security-warning">Enter key to access admin page.</p> </form> </div> </div> )}
            {isFeedbackModalVisible && ( <div className="feedback-modal-overlay"> <div className="feedback-modal"> <h3 id="feedback-title">Submit Feedback</h3> <button onClick={toggleFeedbackModal} className="close-feedback-button" title="Close Feedback">×</button> {feedbackSuccess && <p className="feedback-message success">{feedbackSuccess}</p>} {feedbackError && <p className="feedback-message error">{feedbackError}</p>} {!feedbackSuccess && ( <form onSubmit={handleFeedbackSubmit} className="feedback-form"> <div className="feedback-field"> <label htmlFor="feedback-email">Email (Optional):</label> <input type="email" id="feedback-email" className="settings-input" value={feedbackEmail} onChange={(e) => setFeedbackEmail(e.target.value)} placeholder="your.email@example.com" maxLength={250} disabled={isSubmittingFeedback} /> </div> <div className="feedback-field"> <label>Rating:<span style={{color:'red'}}>*</span></label> <div className="star-rating"> {[1, 2, 3, 4, 5].map(star => ( <button key={star} type="button" aria-pressed={star === feedbackRating} className={`star-button ${star <= feedbackRating ? 'selected' : ''}`} onClick={() => setFeedbackRating(star)} disabled={isSubmittingFeedback} aria-label={`Rate ${star}/5`}>★</button> ))} </div> </div> <div className="feedback-field"> <label htmlFor="feedback-comment">Comment:<span style={{color:'red'}}>*</span></label> <textarea id="feedback-comment" className="settings-input" rows={5} value={feedbackComment} onChange={(e) => setFeedbackComment(e.target.value)} placeholder="Feedback, suggestions, bugs..." maxLength={2000} required disabled={isSubmittingFeedback} /> </div> <div className="feedback-actions"> <button type="button" onClick={toggleFeedbackModal} className="cancel-feedback-button" disabled={isSubmittingFeedback}>Cancel</button> <button type="submit" className="submit-feedback-button" disabled={isSubmittingFeedback || feedbackRating === 0 || !feedbackComment.trim()}> {isSubmittingFeedback ? 'Submitting...' : 'Submit Feedback'} </button> </div> </form> )} </div> </div> )}

            <Routes>
                <Route path="/" element={ <> <header className="App-header"> <div style={{ display: 'flex', alignItems: 'center' }}> <button onClick={toggleSettings} className="settings-button" title="Settings">⚙️</button> <button onClick={toggleAnalysisForm} className="settings-button analysis-button" title="University Advice Form">📝</button> <button onClick={toggleFeedbackModal} className="settings-button" title="Submit Feedback">💬</button> </div> <h1>Project Theraphy</h1> <div className="header-spacer-right"></div> </header> <ChatbotPage messages={messages} setMessages={setMessages} selectedModel={selectedModel} sttLang={sttLang} selectedPersona={selectedPersona} accessKey={enteredKey} /> </> } />
                 <Route path="/admin" element={ <ProtectedRoute> <AdminPage /> </ProtectedRoute> } />
                 <Route path="*" element={<Navigate to="/" replace />} />
            </Routes>
        </div>
    );
}

export default App;